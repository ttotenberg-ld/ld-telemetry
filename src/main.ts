import "./style.css";
import { initialize } from "launchdarkly-js-client-sdk";
import {
  initTelemetry,
  register,
  inspectors,
} from "@launchdarkly/browser-telemetry";

// Initialize LaunchDarkly telemetry
initTelemetry();

// Get the LaunchDarkly client ID from the environment variable
const LD_CLIENT_ID = import.meta.env.VITE_LD_CLIENT_ID;
console.log("LD_CLIENT_ID", LD_CLIENT_ID);

// Define a LaunchDarkly context
const context = {
  kind: "user",
  key: "context-key-123abc",
};

// Initialize the LaunchDarkly client
const client = initialize(LD_CLIENT_ID, context, {
  inspectors: inspectors(),
  streaming: true,
});

// Register the client with LaunchDarkly telemetry
register(client);

// Function to update button visibility based on flag value
function updateButtonVisibility() {
  const buttonEnabled = client.variation("enable-button", false);
  console.log("Flag value for enable-button:", buttonEnabled);
  
  const featureButton = document.getElementById("feature-button");
  if (featureButton) {
    featureButton.style.display = buttonEnabled ? "inline-block" : "none";
  }
}

// Add event listeners for LaunchDarkly flag changes
client.on('ready', updateButtonVisibility);
client.on('change:enable-button', updateButtonVisibility);

document.querySelector<HTMLDivElement>("#app")!.innerHTML = `
  <div>
    <h1>LaunchDarkly Autogenerated Metrics Test</h1>
    <div class="card">
      <button id="feature-button" type="button" style="display: none">Feature Button</button>
    </div>
  </div>
`;

// Add error-generating click handler to the feature button
const featureButton = document.querySelector<HTMLButtonElement>("#feature-button");
if (featureButton) {
  featureButton.addEventListener("click", () => {
    // Intentionally throw an unhandled error for telemetry testing
    throw new Error("Unhandled error from feature button click");
  });
}